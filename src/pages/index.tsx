import ImageContainer from '@/components/ImageContainer'
import LoadingIndicator from '@/components/LoadingIndicator'
import { getMetaData, getPhotos } from '@/queries/nasa'
import { Rover } from '@/types'
import Head from 'next/head'
import React, { FC } from 'react'
import { useQuery } from 'react-query'
import styled from 'styled-components'

type RoverImageProps = {
  rover: Rover
  maxSol: number
}

const RoverImage: FC<RoverImageProps> = ({ rover, maxSol }) => {
  const photos = useQuery(['photos', rover, maxSol], () =>
    getPhotos(1, rover, maxSol)
  )

  const latestPhoto =
    photos.status === 'success' && photos?.data?.photos[0]?.img_src

  return latestPhoto ? (
    <Image src={latestPhoto} role="none" />
  ) : (
    <LoadingIndicator />
  )
}

type RoverImageWrapperProps = {
  rover: Rover
}

const RoverImageWrapper: FC<RoverImageWrapperProps> = ({ rover }) => {
  const meta = useQuery(['meta', rover], () => getMetaData(rover), { retry: 1 })
  const maxSol = meta.status === 'success' && meta.data.photo_manifest.max_sol

  return (
    <ImageContainer>
      {maxSol === undefined ? (
        <LoadingIndicator />
      ) : (
        <RoverImage rover={rover} maxSol={maxSol} />
      )}
    </ImageContainer>
  )
}

const Image = styled.img`
  width: 100%;
`

const Home: FC = () => {
  return (
    <>
      <Head>
        <title>Mars rover photos</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Main>
        <h1>Nasa Rover Photos</h1>
        <PhotoGrid>
          <RoverImageWrapper rover="perseverance" />
          <RoverImageWrapper rover="curiosity" />
          <RoverImageWrapper rover="opportunity" />
          <RoverImageWrapper rover="spirit" />
        </PhotoGrid>
      </Main>
    </>
  )
}

export default Home

const Main = styled.main`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
`

const PhotoGrid = styled.div`
  display: grid;
  gap: 16px;
  grid-template-columns: 100%;
  grid-template-rows: auto auto auto auto;
  width: 80%;
  overflow: visible;
  padding-bottom: 16px;

  @media only screen and (min-width: 600px) {
    grid-template-columns: auto auto;
    grid-template-rows: auto auto;
    width: 60%;
    max-width: 800px;
  }
`
